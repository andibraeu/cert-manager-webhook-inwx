image: golang:1.25-alpine

stages:
  - test
  - package
  - deploy-docker
  - deploy

variables:
  HELM_IMAGE: alpine/helm:3.2.4

lint-helm:
  stage: test
  image:
    name: $HELM_IMAGE
    entrypoint: [""]
  script:
    - helm lint deploy/cert-manager-webhook-inwx
  interruptible: true

lint-go:
  stage: test
  script:
    - apk add --no-cache git
    - go get -u golang.org/x/lint/golint
    - golint -set_exit_status
  interruptible: true

test:
  stage: test
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
  script:
    - apk add --no-cache git g++ gettext curl
    - scripts/fetch-test-binaries.sh
    - envsubst < testdata/config.json.tpl > testdata/config.json
    - envsubst < testdata/secret-inwx-credentials.yaml.tpl > testdata/secret-inwx-credentials.yaml
    - envsubst < testdata/config-otp.json.tpl > testdata/config-otp.json
    - envsubst < testdata/secret-inwx-credentials-otp.yaml.tpl > testdata/secret-inwx-credentials-otp.yaml
    - go mod download
    - go test -v -cover .
  coverage: '/coverage:\s(\d+(?:\.\d+)?%)/'
  interruptible: true
  cache:
    paths:
      - .go

.package:
  stage: package
  image: docker:latest
  services:
    - docker:dind
  variables:
    GOARCH: ""
    GOARM: ""
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  script:
    - docker build --build-arg GOARCH="$GOARCH" --build-arg GOARM="$GOARM" -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME-$CI_JOB_NAME .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME-$CI_JOB_NAME
  interruptible: true

amd64:
  extends: .package
  variables:
    GOARCH: amd64

armv7:
  extends: .package
  variables:
    GOARCH: arm
    GOARM: 7

armv8:
  extends: .package
  variables:
    GOARCH: arm64

docker:
  stage: deploy-docker
  image: docker:latest
  services:
    - name: "docker:dind"
      command: ["--experimental"]
  variables:
    DOCKER_CLI_EXPERIMENTAL: "enabled"
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  script:
    - |
      docker manifest create $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME \
        $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME-amd64 \
        $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME-armv7 \
        $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME-armv8
    - docker manifest annotate $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME-amd64 --os linux --arch amd64
    - docker manifest annotate $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME-armv7 --os linux --arch arm --variant v7
    - docker manifest annotate $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME-armv8 --os linux --arch arm64 --variant v8
    - docker manifest push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  interruptible: true

pages:
  stage: deploy
  image:
    name: $HELM_IMAGE
    entrypoint: [""]
  only:
    - tags
  before_script:
    - mkdir public
    - cd public
    - apk add --no-cache curl
    - echo $CI_PAGES_URL
    - |
      export VERSION=$(cat ../deploy/cert-manager-webhook-inwx/Chart.yaml | grep "^version: *" | sed 's/version: //')
    - |
      if [ "$VERSION" != "0.1.0" ]; then curl --fail -sS $CI_PAGES_URL/content.tar.gz -o /tmp/content.tar.gz; fi
    - |
      [ -f /tmp/content.tar.gz ] && tar -xzf /tmp/content.tar.gz .
    - if [ $(find . -name "*${VERSION}*" | wc -l) -gt 0 ]; then echo "Version is already released"; exit 1; fi
  script:
    - cp ../README.md ../deploy/cert-manager-webhook-inwx/
    - mkdir -p sync_dir
    - helm package --destination sync_dir ../deploy/cert-manager-webhook-inwx
    - |
      [ -f /tmp/content.tar.gz ] && export MERGE="--merge index.yaml"
    - helm repo index ${MERGE} --url $CI_PAGES_URL sync_dir
    - mv -f sync_dir/* .
    - rmdir sync_dir
    - tar -czf content.tar.gz .
  artifacts:
    paths:
      - public
